
SQL Statements for creating the Database
........................................

.. code-block:: sql

    BEGIN TRANSACTION;
    DROP TABLE IF EXISTS "VISIT_DIMENSION";
    CREATE TABLE IF NOT EXISTS "VISIT_DIMENSION" (
        "ENCOUNTER_NUM"	INTEGER UNIQUE,
        "PATIENT_NUM"	NUMERIC,
        "ACTIVE_STATUS_CD"	TEXT,
        "START_DATE"	NUMERIC,
        "END_DATE"	NUMERIC,
        "INOUT_CD"	TEXT,
        "LOCATION_CD"	TEXT,
        "VISIT_BLOB"	BLOB,
        "UPDATE_DATE"	TEXT,
        "DOWNLOAD_DATE"	TEXT,
        "IMPORT_DATE"	TEXT,
        "SOURCESYSTEM_CD"	TEXT,
        "UPLOAD_ID"	NUMERIC,
        PRIMARY KEY("ENCOUNTER_NUM" AUTOINCREMENT)
    );
    DROP TABLE IF EXISTS "CONCEPT_DIMENSION";
    CREATE TABLE IF NOT EXISTS "CONCEPT_DIMENSION" (
        "CONCEPT_PATH"	TEXT,
        "CONCEPT_CD"	TEXT UNIQUE,
        "NAME_CHAR"	TEXT NOT NULL,
        "VALTYPE_CD"	TEXT,
        "UNIT_CD"	TEXT,
        "RELATED_CONCEPT"	TEXT,
        "CONCEPT_BLOB"	BLOB,
        "UPDATE_DATE"	TEXT,
        "DOWNLOAD_DATE"	TEXT,
        "IMPORT_DATE"	TEXT,
        "SOURCESYSTEM_CD"	TEXT,
        "UPLOAD_ID"	NUMERIC,
        PRIMARY KEY("CONCEPT_CD")
    );
    DROP TABLE IF EXISTS "OBSERVATION_FACT";
    CREATE TABLE IF NOT EXISTS "OBSERVATION_FACT" (
        "OBSERVATION_ID"	INTEGER,
        "ENCOUNTER_NUM"	INTEGER NOT NULL,
        "PATIENT_NUM"	INTEGER NOT NULL,
        "CATEGORY_CHAR"	TEXT,
        "CONCEPT_CD"	TEXT,
        "PROVIDER_ID"	TEXT,
        "START_DATE"	TEXT,
        "INSTANCE_NUM"	NUMERIC,
        "VALTYPE_CD"	TEXT,
        "TVAL_CHAR"	TEXT,
        "NVAL_NUM"	NUMERIC,
        "VALUEFLAG_CD"	TEXT,
        "QUANTITY_NUM"	TEXT,
        "UNIT_CD"	TEXT,
        "END_DATE"	NUMERIC,
        "LOCATION_CD"	TEXT,
        "CONFIDENCE_NUM"	TEXT,
        "OBSERVATION_BLOB"	BLOB,
        "UPDATE_DATE"	TEXT,
        "DOWNLOAD_DATE"	TEXT,
        "IMPORT_DATE"	TEXT,
        "SOURCESYSTEM_CD"	TEXT,
        "UPLOAD_ID"	NUMERIC,
        PRIMARY KEY("OBSERVATION_ID" AUTOINCREMENT),
        FOREIGN KEY("CONCEPT_CD") REFERENCES "CONCEPT_DIMENSION"("CONCEPT_CD") ON DELETE CASCADE ON UPDATE NO ACTION,
        FOREIGN KEY("ENCOUNTER_NUM") REFERENCES "VISIT_DIMENSION"("ENCOUNTER_NUM") ON DELETE CASCADE ON UPDATE NO ACTION,
        FOREIGN KEY("PATIENT_NUM") REFERENCES "PATIENT_DIMENSION"("PATIENT_NUM") ON DELETE CASCADE ON UPDATE NO ACTION
    );
    DROP TABLE IF EXISTS "CONCEPT_CQL_LOOKUP";
    CREATE TABLE IF NOT EXISTS "CONCEPT_CQL_LOOKUP" (
        "CONCEPT_CQL_ID"	INTEGER,
        "CONCEPT_CD"	TEXT NOT NULL,
        "CQL_ID"	INTEGER NOT NULL,
        "NAME_CHAR"	TEXT,
        "RULE_BLOB"	TEXT,
        "UPDATE_DATE"	TEXT,
        "DOWNLOAD_DATE"	TEXT,
        "IMPORT_DATE"	TEXT,
        "UPLOAD_ID"	NUMERIC,
        PRIMARY KEY("CONCEPT_CQL_ID" AUTOINCREMENT),
        FOREIGN KEY("CONCEPT_CD") REFERENCES "CONCEPT_DIMENSION"("CONCEPT_CD"),
        FOREIGN KEY("CQL_ID") REFERENCES "CQL_FACT"("CQL_ID")
    );
    DROP TABLE IF EXISTS "NOTE_FACT";
    CREATE TABLE IF NOT EXISTS "NOTE_FACT" (
        "NOTE_ID"	INTEGER UNIQUE,
        "CATEGORY_CHAR"	TEXT,
        "NAME_CHAR"	TEXT,
        "NOTE_BLOB"	TEXT,
        "UPDATE_DATE"	TEXT,
        "DOWNLOAD_DATE"	TEXT,
        "IMPORT_DATE"	TEXT,
        "UPLOAD_ID"	NUMERIC,
        PRIMARY KEY("NOTE_ID" AUTOINCREMENT)
    );
    DROP TABLE IF EXISTS "CQL_FACT";
    CREATE TABLE IF NOT EXISTS "CQL_FACT" (
        "CQL_ID"	INTEGER UNIQUE,
        "CODE_CD"	TEXT,
        "NAME_CHAR"	TEXT,
        "CQL_CHAR"	BLOB,
        "JSON_CHAR"	BLOB,
        "CQL_BLOB"	BLOB,
        "UPDATE_DATE"	TEXT,
        "IMPORT_DATE"	TEXT,
        "DOWNLOAD_DATE"	TEXT,
        "UPLOAD_ID"	NUMERIC,
        PRIMARY KEY("CQL_ID" AUTOINCREMENT)
    );
    DROP TABLE IF EXISTS "PROVIDER_DIMENSION";
    CREATE TABLE IF NOT EXISTS "PROVIDER_DIMENSION" (
        "PROVIDER_ID"	TEXT,
        "PROVIDER_PATH"	TEXT,
        "NAME_CHAR"	TEXT,
        "CONCEPT_BLOB"	BLOB,
        "UPDATE_DATE"	TEXT,
        "DOWNLOAD_DATE"	TEXT,
        "IMPORT_DATE"	TEXT,
        "SOURCESYSTEM_CD"	TEXT,
        "UPLOAD_ID"	NUMERIC,
        PRIMARY KEY("PROVIDER_ID")
    );
    DROP TABLE IF EXISTS "USER_PATIENT_LOOKUP";
    CREATE TABLE IF NOT EXISTS "USER_PATIENT_LOOKUP" (
        "USER_PATIENT_ID"	INTEGER UNIQUE,
        "USER_ID"	INTEGER NOT NULL,
        "PATIENT_NUM"	INTEGER NOT NULL,
        "NAME_CHAR"	TEXT,
        "USER_PATIENT_BLOB"	TEXT,
        "UPDATE_DATE"	TEXT,
        "DOWNLOAD_DATE"	TEXT,
        "IMPORT_DATE"	TEXT,
        "UPLOAD_ID"	NUMERIC,
        PRIMARY KEY("USER_PATIENT_ID" AUTOINCREMENT),
        FOREIGN KEY("PATIENT_NUM") REFERENCES "PATIENT_DIMENSION"("PATIENT_NUM"),
        FOREIGN KEY("USER_ID") REFERENCES "USER_MANAGEMENT"("USER_ID")
    );
    DROP TABLE IF EXISTS "USER_MANAGEMENT";
    CREATE TABLE IF NOT EXISTS "USER_MANAGEMENT" (
        "USER_ID"	INTEGER UNIQUE,
        "COLUMN_CD"	TEXT,
        "USER_CD"	TEXT UNIQUE,
        "NAME_CHAR"	TEXT,
        "PASSWORD_CHAR"	TEXT,
        "USER_BLOB"	TEXT,
        "UPDATE_DATE"	TEXT,
        "DOWNLOAD_DATE"	TEXT,
        "IMPORT_DATE"	TEXT,
        "UPLOAD_ID"	NUMERIC,
        PRIMARY KEY("USER_ID" AUTOINCREMENT)
    );
    DROP TABLE IF EXISTS "PATIENT_DIMENSION";
    CREATE TABLE IF NOT EXISTS "PATIENT_DIMENSION" (
        "PATIENT_NUM"	INTEGER UNIQUE,
        "PATIENT_CD"	TEXT UNIQUE,
        "VITAL_STATUS_CD"	TEXT,
        "BIRTH_DATE"	NUMERIC,
        "DEATH_DATE"	NUMERIC,
        "AGE_IN_YEARS"	NUMERIC,
        "SEX_CD"	TEXT,
        "LANGUAGE_CD"	TEXT,
        "RACE_CD"	TEXT,
        "MARITAL_STATUS_CD"	TEXT,
        "RELIGION_CD"	TEXT,
        "STATECITYZIP_PATH"	TEXT,
        "PATIENT_BLOB"	BLOB,
        "UPDATE_DATE"	TEXT,
        "DOWNLOAD_DATE"	TEXT,
        "IMPORT_DATE"	TEXT,
        "SOURCESYSTEM_CD"	TEXT,
        "UPLOAD_ID"	NUMERIC,
        PRIMARY KEY("PATIENT_NUM" AUTOINCREMENT)
    );
    DROP TABLE IF EXISTS "CODE_LOOKUP";
    CREATE TABLE IF NOT EXISTS "CODE_LOOKUP" (
        "TABLE_CD"	TEXT DEFAULT NULL,
        "COLUMN_CD"	TEXT DEFAULT NULL,
        "CODE_CD"	TEXT UNIQUE,
        "NAME_CHAR"	TEXT DEFAULT NULL,
        "LOOKUP_BLOB"	BLOB DEFAULT NULL,
        "UPDATE_DATE"	TEXT DEFAULT NULL,
        "DOWNLOAD_DATE"	TEXT DEFAULT NULL,
        "IMPORT_DATE"	TEXT DEFAULT NULL,
        "SOURCESYSTEM_CD"	TEXT DEFAULT NULL,
        "UPLOAD_ID"	NUMERIC DEFAULT NULL,
        PRIMARY KEY("CODE_CD")
    );

    -- TRIGGER
    DROP TRIGGER IF EXISTS "delete_patient_cascade";
    CREATE TRIGGER [delete_patient_cascade]
    BEFORE DELETE
    ON [PATIENT_DIMENSION]
    FOR EACH ROW
    BEGIN
    DELETE FROM VISIT_DIMENSION WHERE VISIT_DIMENSION.PATIENT_NUM = old.PATIENT_NUM;
    DELETE FROM USER_PATIENT_LOOKUP WHERE USER_PATIENT_LOOKUP.PATIENT_NUM = old.PATIENT_NUM;
    END;
    DROP TRIGGER IF EXISTS "delete_visit_cascade";
    CREATE TRIGGER [delete_visit_cascade]
    BEFORE DELETE
    ON [VISIT_DIMENSION]
    FOR EACH ROW
    BEGIN
    DELETE FROM OBSERVATION_FACT WHERE OBSERVATION_FACT.ENCOUNTER_NUM = old.ENCOUNTER_NUM;
    END;
    DROP TRIGGER IF EXISTS "delete_concept_cql_lookup";
    CREATE TRIGGER [delete_concept_cql_lookup]
    BEFORE DELETE
    ON [CQL_FACT]
    FOR EACH ROW
    BEGIN
    DELETE FROM CONCEPT_CQL_LOOKUP WHERE CONCEPT_CQL_LOOKUP.CQL_ID = old.CQL_ID;
    END;

    -- VIEWS
    DROP VIEW IF EXISTS "patient_observations";
    CREATE VIEW patient_observations
    AS

    SELECT
    PATIENT_DIMENSION.PATIENT_CD as PATIENT_CD,
    PATIENT_DIMENSION.PATIENT_NUM as PATIENT_NUM,
    USER_PATIENT_LOOKUP.USER_ID as USER_ID,
    VISIT_DIMENSION.ENCOUNTER_NUM as ENCOUNTER_NUM,
    OBSERVATION_FACT.START_DATE as START_DATE,
    OBSERVATION_FACT.OBSERVATION_ID as OBSERVATION_ID,
    OBSERVATION_FACT.CATEGORY_CHAR as CATEGORY_CHAR,
    OBSERVATION_FACT.CONCEPT_CD as CONCEPT_CD,
    CD1.NAME_CHAR as CONCEPT_NAME_CHAR,
    OBSERVATION_FACT.VALTYPE_CD as VALTYPE_CD,
    OBSERVATION_FACT.NVAL_NUM as NVAL_NUM,
    OBSERVATION_FACT.UNIT_CD as UNIT_CD,
    CD3.NAME_CHAR as UNIT_RESOLVED,
    OBSERVATION_FACT.TVAL_CHAR as TVAL_CHAR,
    CD2.NAME_CHAR as TVAL_RESOLVED,
    OBSERVATION_FACT.OBSERVATION_BLOB as OBSERVATION_BLOB,
    OBSERVATION_FACT.LOCATION_CD as LOCATION_CD,
    OBSERVATION_FACT.PROVIDER_ID as PROVIDER_ID
    
    FROM
        OBSERVATION_FACT

    INNER JOIN PATIENT_DIMENSION ON
        PATIENT_DIMENSION.PATIENT_NUM = OBSERVATION_FACT.PATIENT_NUM
    INNER  JOIN VISIT_DIMENSION ON
        VISIT_DIMENSION.ENCOUNTER_NUM = OBSERVATION_FACT.ENCOUNTER_NUM
    LEFT  JOIN CONCEPT_DIMENSION AS CD1 ON
        CD1.CONCEPT_CD = OBSERVATION_FACT.CONCEPT_CD
    LEFT  JOIN CONCEPT_DIMENSION AS CD2 ON
        CD2.CONCEPT_CD = OBSERVATION_FACT.TVAL_CHAR
    LEFT  JOIN CONCEPT_DIMENSION AS CD3 ON
        CD3.CONCEPT_CD = OBSERVATION_FACT.UNIT_CD	
        
    LEFT JOIN USER_PATIENT_LOOKUP ON
        USER_PATIENT_LOOKUP.PATIENT_NUM = OBSERVATION_FACT.PATIENT_NUM
        
    ORDER BY	PATIENT_CD, ENCOUNTER_NUM, START_DATE, CONCEPT_NAME_CHAR;
    DROP VIEW IF EXISTS "patient_list";
    CREATE VIEW patient_list
    AS

    SELECT
        PATIENT_DIMENSION.PATIENT_NUM as PATIENT_NUM,
        PATIENT_DIMENSION.PATIENT_CD as PATIENT_CD,
        USER_PATIENT_LOOKUP.USER_ID as USER_ID,
        PATIENT_DIMENSION.VITAL_STATUS_CD as VITAL_STATUS_CD,
        CD1.NAME_CHAR as VITAL_STATUS_RESOLVED,
        PATIENT_DIMENSION.BIRTH_DATE as BIRTH_DATE,
        PATIENT_DIMENSION.SEX_CD as SEX_CD,
        CD2.NAME_CHAR as SEX_RESOLVED,
        PATIENT_DIMENSION.AGE_IN_YEARS as AGE_IN_YEARS,
        PATIENT_DIMENSION.LANGUAGE_CD as LANGUAGE_CD,
        CD3.NAME_CHAR as LANGUAGE_RESOLVED,
        PATIENT_DIMENSION.RACE_CD as RACE_CD, 
        CD4.NAME_CHAR as RACE_RESOLVED,
        PATIENT_DIMENSION.MARITAL_STATUS_CD as MARITAL_STATUS_CD, 
        CD5.NAME_CHAR as MARITAL_STATUS_RESOLVED,
        PATIENT_DIMENSION.RELIGION_CD as RELIGION_CD,
        CD6.NAME_CHAR as RELIGION_RESOLVED,
        PATIENT_DIMENSION.STATECITYZIP_PATH as STATECITYZIP_PATH,
        PATIENT_DIMENSION.PATIENT_BLOB as PATIENT_BLOB

    FROM 
        PATIENT_DIMENSION  
        
    LEFT JOIN CONCEPT_DIMENSION AS CD1 ON
        CD1.CONCEPT_CD = PATIENT_DIMENSION.VITAL_STATUS_CD
    LEFT JOIN CONCEPT_DIMENSION AS CD2 ON
        CD2.CONCEPT_CD = PATIENT_DIMENSION.SEX_CD
    LEFT JOIN CONCEPT_DIMENSION AS CD3 ON
        CD3.CONCEPT_CD = PATIENT_DIMENSION.LANGUAGE_CD
    LEFT JOIN CONCEPT_DIMENSION AS CD4 ON
        CD4.CONCEPT_CD = PATIENT_DIMENSION.RACE_CD
    LEFT JOIN CONCEPT_DIMENSION AS CD5 ON
        CD5.CONCEPT_CD = PATIENT_DIMENSION.MARITAL_STATUS_CD
    LEFT JOIN CONCEPT_DIMENSION AS CD6 ON
        CD6.CONCEPT_CD = PATIENT_DIMENSION.RELIGION_CD
        
    LEFT JOIN USER_PATIENT_LOOKUP ON
            USER_PATIENT_LOOKUP.PATIENT_NUM = PATIENT_DIMENSION.PATIENT_NUM
        
    ORDER BY	PATIENT_CD;
    DROP VIEW IF EXISTS "cql_concept_list";
    CREATE VIEW cql_concept_list
    AS

    SELECT
        CONCEPT_CQL_LOOKUP.CONCEPT_CQL_ID as CONCEPT_CQL_ID,
    CONCEPT_CQL_LOOKUP.CQL_ID as CQL_ID,
    CQL_FACT.CODE_CD as CQL_CODE_CD,
    CQL_FACT.NAME_CHAR as CQL_NAME_CHAR,
    CONCEPT_CQL_LOOKUP.CONCEPT_CD as CONCEPT_CD,
    CONCEPT_DIMENSION.NAME_CHAR as CONCEPT_NAME_CHAR
    
    FROM
        CONCEPT_CQL_LOOKUP

    INNER JOIN CONCEPT_DIMENSION ON
        CONCEPT_DIMENSION.CONCEPT_CD = CONCEPT_CQL_LOOKUP.CONCEPT_CD

    INNER JOIN CQL_FACT ON
        CQL_FACT.CQL_ID = CONCEPT_CQL_LOOKUP.CQL_ID

    ORDER BY	CONCEPT_CD;
    COMMIT;
